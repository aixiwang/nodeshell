--------------------------------------------------------
--nodeshell.lua -- NodeMCU shell lib
--The lib is validated on GuoYun Tech. ESP8266 evaluation board
--Note: part of code is come from internet. the related right is owned by it's original owner
--The firmware is generated by code from https://github.com/nodemcu/nodemcu-firmware. Thanks NodeMCU team!
--The code syntax checking used http://www.tutorialspoint.com/execute_lua_online.php
--API is refereed from  https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_en
--The code can be uploaded to NodeMCU by NodeMCU Studio tool. Of course, you can write your own tool to upload it.
--The firmware is burned to board with NodeMCU firmware programmer tool.
--
--BSD license is applied to nodeshell lib
--Author: Aixi Wang (aixi.wang@hotmail.com)
--
--------------------------------------------------------
--                version history
-- [v01 Jan 17,2015  Aixi Wang]
-- Initial release
-- [v02 Jan 18,2015  Aixi Wang]
-- added relay,beep,led_white,led_color,uart_echo routines
-- [v03 Jan 23,2015  Aixi Wang]
-- added apdemo2,tcp2uart routines
--------------------------------------------------------
-- How to use:
-- s=require('nodeshell')
-- s.xxx(xxx)
--------------------------------------------------------
local nodeshell = {}

function nodeshell.dumpfile(name)
  file.open(name)
  repeat
    local line=file.readline()
    if line then line=(string.gsub(line,"\n","")) print(line) end
  until not line
  file.close()
end

function nodeshell.ls()
    l = file.list();
    for k,v in pairs(l) do
        print("name:"..k..", size:"..v)
    end
end

function nodeshell.getip()
    print("Config done, IP is "..wifi.sta.getip())
end


function nodeshell.connect_ap(ssid,ps)
    print("set up wifi mode")
    wifi.setmode(wifi.STATION)
    wifi.sta.config(ssid,ps)
    --here SSID and PassWord should be modified according your wireless router
    wifi.sta.connect()
    tmr.alarm(1, 1000, 1, function()
    if wifi.sta.getip()== nil then
        print("IP unavaiable, Waiting...")
    else
        tmr.stop(1)
        print("Config done, IP is "..wifi.sta.getip())
        --dofile("yourfile.lua")
    end
    end)
end

function nodeshell.restart()
    node.restart()
end

function nodeshell.rm(name)
    file.remove(name)
end

function nodeshell.ds18b20()
    pin = 2
    ow.setup(pin)
    count = 0
    repeat
      count = count + 1
      addr = ow.reset_search(pin)
      addr = ow.search(pin)
      tmr.wdclr()
    until((addr ~= nil) or (count > 100))
    if (addr == nil) then
      print("No more addresses.")
    else
      print(addr:byte(1,8))
      crc = ow.crc8(string.sub(addr,1,7))
      if (crc == addr:byte(8)) then
        if ((addr:byte(1) == 0x10) or (addr:byte(1) == 0x28)) then
          print("Device is a DS18S20 family device.")
            repeat
              ow.reset(pin)
              ow.select(pin, addr)
              ow.write(pin, 0x44, 1)
              tmr.delay(1000000)
              present = ow.reset(pin)
              ow.select(pin, addr)
              ow.write(pin,0xBE,1)
              print("P="..present)  
              data = nil
              data = string.char(ow.read(pin))
              for i = 1, 8 do
                data = data .. string.char(ow.read(pin))
              end
              print(data:byte(1,9))
              crc = ow.crc8(string.sub(data,1,8))
              print("CRC="..crc)
              if (crc == data:byte(9)) then
                 t = (data:byte(1) + data:byte(2) * 256) * 625
                 t1 = t / 10000
                 t2 = t % 10000
                 print("Temperature= "..t1.."."..t2.." Centigrade")
              end                   
              tmr.wdclr()
            until false
        else
          print("Device family is not recognized.")
        end
      else
        print("CRC is not valid!")
      end
    end
end


function apdemo()
    wifi.setmode(wifi.SOFTAP);
    wifi.ap.config({ssid="test",pwd="12345678"});
    print("Config AP mdoe done, IP is "..wifi.ap.getip())
    gpio.mode(1, gpio.OUTPUT)
    srv=net.createServer(net.TCP) 
    srv:listen(80,function(conn) 
        conn:on("receive", function(client,request)
            local buf = "";
            local _, _, method, path, vars = string.find(request, "([A-Z]+) (.+)?(.+) HTTP");
            if(method == nil)then 
                _, _, method, path = string.find(request, "([A-Z]+) (.+) HTTP"); 
            end
            local _GET = {}
            if (vars ~= nil)then 
                for k, v in string.gmatch(vars, "(%w+)=(%w+)&*") do 
                    _GET[k] = v 
                end 
            end
            buf = buf.."<h1> Hello, NodeMcu.</h1><form src=\"/\">Turn PIN1 <select name=\"pin\" onchange=\"form.submit()\">";
            local _on,_off = "",""
            if(_GET.pin == "ON")then
                  _on = " selected=true";
                  gpio.write(1, gpio.HIGH);
            elseif(_GET.pin == "OFF")then
                  _off = " selected=\"true\"";
                  gpio.write(1, gpio.LOW);
            end
            buf = buf.."<option".._on..">ON</opton><option".._off..">OFF</option></select></form>";
            client:send(buf);
            client:close();
            collectgarbage();
        end)
    end)
end

function nodeshell.telnet()
    -- a simple telnet server
    s=net.createServer(net.TCP,180) 
    s:listen(9999,function(c) 
       function s_output(str) 
          if(c~=nil) 
             then c:send(str) 
          end 
       end 
       node.output(s_output, 0)   -- re-direct output to function s_ouput.
       c:on("receive",function(c,l) 
          node.input(l)           -- works like pcall(loadstring(l)) but support multiple separate line
       end) 
       c:on("disconnection",function(c) 
          node.output(nil)        -- un-regist the redirect output function, output goes to serial
       end) 
       print("Welcome to NodeMcu world.")
    end)
end

function nodeshell.relay(on_off)
    pin=0
    gpio.mode(pin, gpio.OUTPUT)
    if (on_off == 1) then
        gpio.write(pin, gpio.HIGH)
    else
        gpio.write(pin, gpio.LOW)
    end
end
    
function nodeshell.beep(on_off)
    pin=1
    gpio.mode(pin, gpio.OUTPUT)
    if (on_off == 1) then
        gpio.write(pin, gpio.HIGH)
    else
        gpio.write(pin, gpio.LOW)
    end    
end

function nodeshell.led_white(on_off)
    pin=5
    gpio.mode(pin, gpio.OUTPUT)
    if (on_off == 1) then
        gpio.write(pin, gpio.HIGH)
    else
        gpio.write(pin, gpio.LOW)
    end
end
 
function nodeshell.led_color(r,g,b)
    pwm.setup(6,500,512)
    pwm.setup(7,500,512)
    pwm.setup(8,500,512)
    pwm.start(6)
    pwm.start(7)
    pwm.start(8)
    pwm.setduty(6,g)
    pwm.setduty(7,b)
    pwm.setduty(8,r)
end

function nodeshell.key_s2()
    pin=3
    gpio.mode(pin, gpio.INPUT)
    return gpio.read(pin)
end

function nodeshell.key_s3()
    pin=4
    gpio.mode(pin, gpio.INPUT)
    return gpio.read(pin)
end

function nodeshell.uart_echo()
    uart.setup(0,9600,8,0,1)
    uart.on("data", 0 ,function(input) if input=="a" then uart.write(0,"A"..input) else uart.write(0,input) end end, 0)
end

function nodeshell.tcp2uart()
    uart.setup(0,9600,8,0,1)
    sv=net.createServer(net.TCP, 60)
    sv:listen(9999,wifi.sta.getip(),
        function s_output(str) 
          if(c~=nil) 
             then c:send(str) 
          end 
        end
       
        function(c) 
            c:on("receive", 
            function(sck, pl)
                -- tcp -> uart_tx
                uart.write(0,pl)
                -- uart_rx -> tcp
                if (c ~= nil) then
                    uart.on("data",0, function(data)c:send(data) end, 0)
                end
            end)
        s_output('tcp2uart connected')
    end)
end

function nodeshell.apdemo2()
    wifi.setmode(wifi.SOFTAP);
    wifi.ap.config({ssid="wifi-iot-node-"..wifi.ap.getmac(),pwd="12345678"});
    --print("Config AP mdoe done, IP is "..wifi.ap.getip())

    -- check s2, default call tcp2uart.lua, pressed call app.lua
    pin=3
    gpio.mode(pin, gpio.INPUT)
    if (gpio.read(pin) == 1) then
        dofile('tcp2uart.lua')
    else
        dofile("app.lua")
    end
end


function nodeshell.help()
    print ('Commands:')
    print ('=====================')
    print ('dumpfile(name)')
    print ('ls()')
    print ('getip()')
    print ('connect_ap(ssid,ps)')
    print ('restart()') 
    print ('rm(name)')
    print ('ds18b20()')
    print ('apdemo()')
    print ('telnet()')
    print ('relay(on_off)')
    print ('beep(on_off)')
    print ('led_white(on_off)')
    print ('led_color(r,g,b)')
    print ('s2_key()')    
    print ('s3_key()') 
    print ('uart_echo()')
    print ('tcp2uart()')
    print ('apdemo2()')    
end

return nodeshell
